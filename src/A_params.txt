('input_dim', 128)
('latent_dim', 3)
('model_order', 1)
('poly_order', 3)
('include_sine', False)
('library_dim', 20)
('sequential_thresholding', True)
('coefficient_threshold', 0.1)
('coefficient_mask', array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]]))
('coefficient_initialization', 'constant')
('loss_weight_decoder', 0.1)
('loss_weight_sindy_z', 0)
('loss_weight_sindy_x', 0.0001)
('loss_weight_sindy_regularization', 1e-05)
('loss_weight_latent', 1e-06)
('activation', 'sigmoid')
('widths', [64, 32])
('epoch_size', 5000)
('batch_size', 2500)
('nbags', 1)
('threshold_frequency', 50)
('learning_rate', 0.001)
('data_path', '/Users/aloisduston/Desktop/Math/Research/Kutz/SindyEnsemble/src/')
('print_progress', True)
('print_frequency', 1)
('print_freq', 5)
('max_epochs', 5000)
('refinement_epochs', 2000)
('crossval_freq', 200)
('test_freq', 50)
('train_print_freq', inf)
('update_freq', 50)
('use_activation_mask', False)
('use_median', False)
('avg_crossval', False)
('c_loss', False)
('scramble', False)
('eval', False)
('expand_sample', False)
('hybrid_reg', False)
('bagn_factor', 1)
('true_coeffs', array([[  0.       ,   0.       ,   0.       ],
       [-10.       ,  28.       ,   0.       ],
       [ 10.       ,  -1.       ,   0.       ],
       [  0.       ,   0.       ,  -2.6666667],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,  40.       ],
       [  0.       , -40.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ],
       [  0.       ,   0.       ,   0.       ]], dtype=float32))
('exp_label', 'one_bag')
('run', 0)
('device', 'cpu')


torch.Size([20, 3])
torch.Size([64, 128])
torch.Size([64])
torch.Size([32, 64])
torch.Size([32])
torch.Size([3, 32])
torch.Size([3])
torch.Size([32, 3])
torch.Size([32])
torch.Size([64, 32])
torch.Size([64])
torch.Size([128, 64])
torch.Size([128])




torch.Size([32, 3])
torch.Size([32])
torch.Size([64, 32])
torch.Size([64])
torch.Size([128, 64])
torch.Size([128])
torch.Size([20, 3])
torch.Size([64, 128])
torch.Size([64])
torch.Size([32, 64])
torch.Size([32])
torch.Size([3, 32])
torch.Size([3])
#
#
torch.Size([128])



Decoder layers:
[Linear(in_features=128, out_features=64, bias=True), Sigmoid(),
 Linear(in_features=64, out_features=32, bias=True), Sigmoid(),
  Linear(in_features=32, out_features=3, bias=True)]

Decoder layers:
[Linear(in_features=3, out_features=32, bias=True), Sigmoid(),
 Linear(in_features=32, out_features=64, bias=True), Sigmoid(),
  Linear(in_features=64, out_features=128, bias=True)]


